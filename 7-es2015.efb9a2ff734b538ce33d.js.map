{"version":3,"sources":["./src/app/pages/notification-center/notification-center.module.ts","./src/app/pages/notification-center/notification-center.page.ts","./src/app/pages/notification-center/notification-center.page.html"],"names":[],"mappings":"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","file":"7-es2015.efb9a2ff734b538ce33d.js","sourcesContent":["import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {RouterModule} from '@angular/router';\nimport {Routes} from '@angular/router';\nimport {ComponentsModule} from '@app/components/components.module';\nimport {NotificationCenterPage} from '@app/pages/notification-center/notification-center.page';\nimport {FontAwesomeModule} from '@fortawesome/angular-fontawesome';\nimport {IonicModule} from '@ionic/angular';\nimport {MomentModule} from 'ngx-moment';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: NotificationCenterPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes),\n    MomentModule,\n    ComponentsModule,\n    FontAwesomeModule\n  ],\n  declarations: [NotificationCenterPage]\n})\nexport class NotificationCenterPageModule {\n}\n","import {NgZone} from '@angular/core';\nimport {ViewChild} from '@angular/core';\nimport {Component} from '@angular/core';\nimport {Order} from '@models/business/order.model';\nimport {NotificationData} from '@models/push-messages/notification-data.model';\nimport {OrderDetailTabsPage} from '@app/pages/order-detail-tabs/order-detail-tabs.page';\nimport {ModalController} from '@ionic/angular';\nimport {ToastController} from '@ionic/angular';\nimport {IonContent} from '@ionic/angular';\nimport {TranslateService} from '@ngx-translate/core';\nimport {MblsAnalyticsService} from '@services/mbls-analytics-service/MblsAnalyticsService';\nimport {LogService} from '@services/log/log.service';\nimport {NotificationService} from '@services/notification-service/notification.service';\nimport {NotificationStoreService} from '@services/notification-store/notification-store.service';\nimport {OrderService} from '@services/order-service/order.service';\nimport {Observable} from 'rxjs';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\nconst CONFIG = {\n  GA: {\n    PAGE_NAME: 'NotificationCenterPage',\n  }\n};\n\n@Component({\n  selector: 'app-notification-center',\n  templateUrl: './notification-center.page.html',\n  styleUrls: ['./notification-center.page.scss'],\n})\nexport class NotificationCenterPage {\n\n  @ViewChild('notificationListContent', {static: true}) content: IonContent;\n  private unsubscribe: Subject<void> = new Subject<void>();\n  notifications: Array<NotificationData> = [];\n\n  constructor(\n    private notificationService: NotificationService,\n    private notificationStore: NotificationStoreService,\n    private orderService: OrderService,\n    private translateService: TranslateService,\n    private log: LogService,\n    private toastCtrl: ToastController,\n    private modalCtrl: ModalController,\n    private ga: MblsAnalyticsService,\n    private ngZone: NgZone,\n  ) {\n  }\n\n  ionViewDidEnter() {\n    this.ga.trackView(CONFIG.GA.PAGE_NAME).catch(error => this.log.info(`Unable to track view ${CONFIG.GA.PAGE_NAME} with GA`, error));\n  }\n\n  ionViewWillEnter() {\n    this.notificationStore.ready()\n      .then(() => {\n        this.cleanOldNotifications().subscribe(() => {\n          }, (error) => {\n            this.log.error('Unable to clean old notification', error);\n          },\n          () => {\n            this.readAllNotifications();\n          });\n        this.notificationStore.getLiveChanges()\n          .pipe(\n            takeUntil(this.unsubscribe)\n          )\n          .subscribe((notificationChange) => {\n            this.ngZone.run(() => {\n              this.manageNewNotification(notificationChange.doc);\n            });\n          });\n      });\n  }\n\n  ionViewDidLeave() {\n    this.unsubscribe.next();\n  }\n\n  ionViewWillUnload() {\n    this.unsubscribe.complete();\n  }\n\n  async notificationClicked(orderId: string) {\n    await this.readNotification(orderId).subscribe();\n  }\n\n  readNotification(orderId: string): Observable<any> {\n    return new Observable(subscriber => {\n      if (orderId) {\n        const notification = this.notifications.find(n => (n.orderId.toString() === orderId.toString() && !n.read));\n        if (notification && !notification.read) {\n          // save in store\n          this.setNotificationStatus(notification._id, true);\n          this.notificationService.notificationRead({orderId, notificationType: notification.notificationType})\n            .subscribe(() => {\n                this.notificationStore.put(notification).subscribe();\n                subscriber.next();\n              },\n              error => {\n                // nothing to do\n                this.openToast('notifications.update_unsuccessful');\n                this.setNotificationStatus(notification._id, false);\n                this.log.error('Unable to save changed notification', error);\n                subscriber.error(error);\n                subscriber.complete();\n              },\n              () => {\n                subscriber.next();\n                subscriber.complete();\n              });\n        }\n      }\n    });\n  }\n\n  setNotificationStatus(id: string, read: boolean) {\n    const notification = this.notifications.find(n => n._id === id);\n    if (notification) {\n      notification.read = read;\n    }\n  }\n\n  openNotification(orderId: string) {\n    if (orderId) {\n      // create Order view for item\n      this.orderService.getOrderById(orderId.toString())\n        .subscribe((order: Order) => {\n          this.openOrder(order);\n        }, () => {\n          this.openToast('notifications.orderNotFound');\n        });\n    }\n  }\n\n  removeAllNotifications() {\n    this.notifications.forEach(notification => this.notificationStore.remove(notification).subscribe());\n    if (this.notifications.some(notification => !notification.read)) {\n      this.openToast('notifications.unreadNotification');\n    }\n  }\n\n  async markAllAsRead() {\n    this.notifications.forEach(async notification => {\n      if (!notification.read) {\n        await this.readNotification(String(notification.orderId)).subscribe();\n      }\n    });\n  }\n\n  cleanOldNotifications(): Observable<any> {\n    return new Observable(subscriber => {\n      this.notificationService.removeOldDocs().subscribe(() => {\n        },\n        (error) => {\n          this.log.error('Error while cleaning old notifications', error);\n          subscriber.error(error);\n          subscriber.complete();\n        },\n        () => {\n          subscriber.next();\n          subscriber.complete();\n        });\n    });\n  }\n\n  private readAllNotifications() {\n    this.notificationStore.allDocs()\n      .subscribe((notifications: Array<NotificationData>) => {\n        this.ngZone.run(() => {\n          this.notifications = notifications;\n        });\n      });\n  }\n\n  private manageNewNotification(notification: NotificationData) {\n    this.readAllNotifications();\n  }\n\n  private async openOrder(order: Order) {\n    const itemModal = await this.modalCtrl.create({\n      id: 'order-detail-tabs-page',\n      component: OrderDetailTabsPage,\n      componentProps: {\n        orderView: this.orderService.constructOrderView(order)\n      }\n    });\n    await itemModal.present();\n  }\n\n  private async openToast(message: string) {\n    const toast = await this.toastCtrl.create({\n      message: this.translateService.instant(message),\n      duration: 2 * 1000,\n      cssClass: 'processing-toast'\n    });\n\n    await toast.present();\n  }\n}\n","<ion-header>\n\n  <ion-toolbar>\n    <ion-buttons slot=\"start\">\n      <ion-menu-button>\n        <img src=\"assets/images/logo_menu.png\"/>\n      </ion-menu-button>\n    </ion-buttons>\n    <ion-title>{{ 'pages.drawer-menu.notification-center' | translate }}</ion-title>\n\n    <ion-buttons slot=\"end\">\n      <ion-button slot=\"icon-only\" (click)=\"removeAllNotifications()\">\n        <fa-icon class=\"fa-lg\" [icon]=\"['fas', 'trash']\"></fa-icon>\n      </ion-button>\n      <ion-button slot=\"icon-only\" (click)=\"markAllAsRead()\">\n        <fa-icon class=\"fa-lg\" [icon]=\"['fas', 'check']\"></fa-icon>\n      </ion-button>\n    </ion-buttons>\n  </ion-toolbar>\n\n</ion-header>\n\n\n<ion-content class=\"ion-padding\" #notificationListContent>\n\n  <ion-list>\n    <ion-item *ngFor=\"let notification of notifications\"\n              [ngClass]=\"{'new' : !notification.read, 'fadeout' : notification.read}\"\n              (click)=\"notificationClicked(notification.orderId.toString())\">\n      <ion-label class=\"ion-text-wrap\">\n        <ion-text>\n          <h2> {{ notification.title}}</h2>\n        </ion-text>\n        <p class=\"notification\">{{ notification.message }}</p>\n        <p>{{ notification.timestamp | amTimeAgo }}</p>\n      </ion-label>\n      <ion-button (click)=\"openNotification(notification.orderId.toString())\" fill=\"clear\" slot=\"end\">{{ 'actions.view' |\n          translate}}\n      </ion-button>\n    </ion-item>\n  </ion-list>\n\n</ion-content>\n"],"sourceRoot":"webpack:///"}