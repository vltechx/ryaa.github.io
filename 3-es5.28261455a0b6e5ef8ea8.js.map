{"version":3,"sources":["webpack:///src/app/pages/setting/location-setting/location-setting.module.ts","webpack:///src/app/pages/setting/location-setting/location-setting.page.html","webpack:///src/app/pages/setting/location-setting/location-setting.page.ts"],"names":["routes","path","component","LocationSettingPageModule","forChild","defaultZoomLevel","LocationSettingPage","mobileContextService","backgroundGeolocationService","modalCtrl","ngZone","settingsManager","unsubscribe","latitude","longitude","zoom","userLocations","userSettingsObservable","pipe","subscribe","userSettings","setCurrentCenter","next","complete","location","center","position","marker","index","run","splice","locationChanged","create","componentProps","then","res","present","onDidDismiss","data","push","getLastKnownPosition","addLocation"],"mappings":"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","file":"3-es5.28261455a0b6e5ef8ea8.js","sourcesContent":["import {AgmCoreModule} from '@agm/core';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {RouterModule} from '@angular/router';\nimport {Routes} from '@angular/router';\nimport {ComponentsModule} from '@app/components/components.module';\nimport {LocationSettingPage} from '@app/pages/setting/location-setting/location-setting.page';\nimport {IonicModule} from '@ionic/angular';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LocationSettingPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes),\n    ComponentsModule,\n    AgmCoreModule,\n  ],\n  declarations: [LocationSettingPage]\n})\nexport class LocationSettingPageModule {\n}\n","<ion-content class=\"ion-no-padding\">\n  <ion-grid>\n    <ion-row *ngFor=\"let location of userLocations; let i = index\" class=\"ion-text-wrap\">\n      <ion-col size=\"10\" (click)=\"show(location)\">\n        {{ location.name }}: {{ location.address }}\n      </ion-col>\n      <ion-col size=\"2\">\n        <ion-button size=\"small\" (click)=\"removeLocation(i)\">\n          <fa-icon [icon]=\"['fas','times']\"></fa-icon>\n        </ion-button>\n      </ion-col>\n    </ion-row>\n  </ion-grid>\n</ion-content>\n\n<ion-footer style=\"height: 340px;\" class=\"ion-text-center\">\n  <ion-button size=\"small\" (click)=\"addLocation()\"><span translate=\"location-settings.addLocation\"></span></ion-button>\n  <ng-container *ngIf=\"center\">\n    <agm-map [latitude]=\"center.latitude\" [longitude]=\"center.longitude\" [zoom]=\"zoom\">\n      <agm-marker [latitude]=\"marker.latitude\" [longitude]=\"marker.longitude\" *ngIf=\"marker\"></agm-marker>\n    </agm-map>\n  </ng-container>\n</ion-footer>\n","import {NgZone} from '@angular/core';\nimport {Component} from '@angular/core';\nimport {OnInit} from '@angular/core';\nimport {Position} from '@models/business/position.model';\nimport {UserLocation} from '@models/settings/user-location.model';\nimport {UserLocationAdderPage} from '@app/pages/setting/user-location-adder/user-location-adder.page';\nimport {ModalController} from '@ionic/angular';\nimport {BackgroundGeolocationService} from '@services/background-geolocation/background-geolocation.service';\nimport {MobileContextService} from '@services/mobile-configuration-service/mobile-context.service';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {SettingsManager} from '@services/settings-providers/settings.service';\n\nconst defaultZoomLevel: number = 14;\n\n@Component({\n  selector: 'app-location-setting',\n  templateUrl: './location-setting.page.html',\n  styleUrls: ['./location-setting.page.scss'],\n})\nexport class LocationSettingPage implements OnInit {\n  private unsubscribe: Subject<void> = new Subject<void>();\n\n  center: Position;\n  marker: Position;\n  latitude = 54.526000;\n  longitude = -105.255100;\n  zoom = defaultZoomLevel;\n  name: string;\n  address: string;\n\n  userLocations: Array<UserLocation> = [];\n\n  constructor(\n    private mobileContextService: MobileContextService,\n    private backgroundGeolocationService: BackgroundGeolocationService,\n    private modalCtrl: ModalController,\n    private ngZone: NgZone,\n    private settingsManager: SettingsManager,\n  ) {\n  }\n\n  ionViewWillEnter(): void {\n    this.mobileContextService.userSettingsObservable\n      .pipe(\n        takeUntil(this.unsubscribe)\n      )\n      .subscribe(userSettings => {\n        if (userSettings) {\n          this.userLocations = userSettings.userLocations;\n        }\n      });\n  }\n\n  ngOnInit() {\n    this.setCurrentCenter();\n  }\n\n  ionViewDidLeave() {\n    this.unsubscribe.next();\n  }\n\n  ionViewWillUnload() {\n    this.unsubscribe.complete();\n  }\n\n  show(location: UserLocation) {\n    this.center = location.position;\n    this.marker = location.position;\n    this.zoom = defaultZoomLevel;\n  }\n\n  removeLocation(index: number) {\n    this.ngZone.run(() => {\n      this.userLocations.splice(index, 1);\n      this.settingsManager.locationChanged();\n    });\n  }\n\n  async addLocation() {\n    await this.modalCtrl.create({\n      component: UserLocationAdderPage,\n      componentProps: {}\n    })\n      .then(\n        res => {\n          res.present();\n          res.onDidDismiss().then(\n            (data) => {\n              if (data && data.data && data.data.location) {\n                this.userLocations.push(data.data.location);\n                this.settingsManager.locationChanged();\n              }\n            }\n          );\n        }\n      );\n  }\n\n  private setCurrentCenter() {\n    const position: Position = this.backgroundGeolocationService.getLastKnownPosition();\n    if (position) {\n      this.center = position;\n      this.zoom = defaultZoomLevel;\n    } else {\n      this.center = new Position(this.latitude, this.longitude);\n      this.zoom = 2;\n    }\n  }\n}\n"]}