{"version":3,"sources":["webpack:///src/app/pages/notification-center/notification-center.module.ts","webpack:///src/app/pages/notification-center/notification-center.page.html","webpack:///src/app/pages/notification-center/notification-center.page.ts"],"names":["routes","path","component","NotificationCenterPageModule","forChild","CONFIG","GA","PAGE_NAME","NotificationCenterPage","notificationService","notificationStore","orderService","translateService","log","toastCtrl","modalCtrl","ga","ngZone","unsubscribe","notifications","trackView","error","info","ready","then","cleanOldNotifications","subscribe","readAllNotifications","getLiveChanges","pipe","notificationChange","run","manageNewNotification","doc","next","complete","orderId","readNotification","subscriber","notification","find","n","toString","read","setNotificationStatus","_id","notificationRead","notificationType","put","openToast","id","getOrderById","order","openOrder","forEach","remove","some","String","removeOldDocs","allDocs","create","componentProps","orderView","constructOrderView","itemModal","present","message","instant","duration","cssClass","toast","removeAllNotifications","markAllAsRead"],"mappings":"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","file":"7-es5.efb9a2ff734b538ce33d.js","sourcesContent":["import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {RouterModule} from '@angular/router';\nimport {Routes} from '@angular/router';\nimport {ComponentsModule} from '@app/components/components.module';\nimport {NotificationCenterPage} from '@app/pages/notification-center/notification-center.page';\nimport {FontAwesomeModule} from '@fortawesome/angular-fontawesome';\nimport {IonicModule} from '@ionic/angular';\nimport {MomentModule} from 'ngx-moment';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: NotificationCenterPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes),\n    MomentModule,\n    ComponentsModule,\n    FontAwesomeModule\n  ],\n  declarations: [NotificationCenterPage]\n})\nexport class NotificationCenterPageModule {\n}\n","<ion-header>\n\n  <ion-toolbar>\n    <ion-buttons slot=\"start\">\n      <ion-menu-button>\n        <img src=\"assets/images/logo_menu.png\"/>\n      </ion-menu-button>\n    </ion-buttons>\n    <ion-title>{{ 'pages.drawer-menu.notification-center' | translate }}</ion-title>\n\n    <ion-buttons slot=\"end\">\n      <ion-button slot=\"icon-only\" (click)=\"removeAllNotifications()\">\n        <fa-icon class=\"fa-lg\" [icon]=\"['fas', 'trash']\"></fa-icon>\n      </ion-button>\n      <ion-button slot=\"icon-only\" (click)=\"markAllAsRead()\">\n        <fa-icon class=\"fa-lg\" [icon]=\"['fas', 'check']\"></fa-icon>\n      </ion-button>\n    </ion-buttons>\n  </ion-toolbar>\n\n</ion-header>\n\n\n<ion-content class=\"ion-padding\" #notificationListContent>\n\n  <ion-list>\n    <ion-item *ngFor=\"let notification of notifications\"\n              [ngClass]=\"{'new' : !notification.read, 'fadeout' : notification.read}\"\n              (click)=\"notificationClicked(notification.orderId.toString())\">\n      <ion-label class=\"ion-text-wrap\">\n        <ion-text>\n          <h2> {{ notification.title}}</h2>\n        </ion-text>\n        <p class=\"notification\">{{ notification.message }}</p>\n        <p>{{ notification.timestamp | amTimeAgo }}</p>\n      </ion-label>\n      <ion-button (click)=\"openNotification(notification.orderId.toString())\" fill=\"clear\" slot=\"end\">{{ 'actions.view' |\n          translate}}\n      </ion-button>\n    </ion-item>\n  </ion-list>\n\n</ion-content>\n","import {NgZone} from '@angular/core';\nimport {ViewChild} from '@angular/core';\nimport {Component} from '@angular/core';\nimport {Order} from '@models/business/order.model';\nimport {NotificationData} from '@models/push-messages/notification-data.model';\nimport {OrderDetailTabsPage} from '@app/pages/order-detail-tabs/order-detail-tabs.page';\nimport {ModalController} from '@ionic/angular';\nimport {ToastController} from '@ionic/angular';\nimport {IonContent} from '@ionic/angular';\nimport {TranslateService} from '@ngx-translate/core';\nimport {MblsAnalyticsService} from '@services/mbls-analytics-service/MblsAnalyticsService';\nimport {LogService} from '@services/log/log.service';\nimport {NotificationService} from '@services/notification-service/notification.service';\nimport {NotificationStoreService} from '@services/notification-store/notification-store.service';\nimport {OrderService} from '@services/order-service/order.service';\nimport {Observable} from 'rxjs';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\nconst CONFIG = {\n  GA: {\n    PAGE_NAME: 'NotificationCenterPage',\n  }\n};\n\n@Component({\n  selector: 'app-notification-center',\n  templateUrl: './notification-center.page.html',\n  styleUrls: ['./notification-center.page.scss'],\n})\nexport class NotificationCenterPage {\n\n  @ViewChild('notificationListContent', {static: true}) content: IonContent;\n  private unsubscribe: Subject<void> = new Subject<void>();\n  notifications: Array<NotificationData> = [];\n\n  constructor(\n    private notificationService: NotificationService,\n    private notificationStore: NotificationStoreService,\n    private orderService: OrderService,\n    private translateService: TranslateService,\n    private log: LogService,\n    private toastCtrl: ToastController,\n    private modalCtrl: ModalController,\n    private ga: MblsAnalyticsService,\n    private ngZone: NgZone,\n  ) {\n  }\n\n  ionViewDidEnter() {\n    this.ga.trackView(CONFIG.GA.PAGE_NAME).catch(error => this.log.info(`Unable to track view ${CONFIG.GA.PAGE_NAME} with GA`, error));\n  }\n\n  ionViewWillEnter() {\n    this.notificationStore.ready()\n      .then(() => {\n        this.cleanOldNotifications().subscribe(() => {\n          }, (error) => {\n            this.log.error('Unable to clean old notification', error);\n          },\n          () => {\n            this.readAllNotifications();\n          });\n        this.notificationStore.getLiveChanges()\n          .pipe(\n            takeUntil(this.unsubscribe)\n          )\n          .subscribe((notificationChange) => {\n            this.ngZone.run(() => {\n              this.manageNewNotification(notificationChange.doc);\n            });\n          });\n      });\n  }\n\n  ionViewDidLeave() {\n    this.unsubscribe.next();\n  }\n\n  ionViewWillUnload() {\n    this.unsubscribe.complete();\n  }\n\n  async notificationClicked(orderId: string) {\n    await this.readNotification(orderId).subscribe();\n  }\n\n  readNotification(orderId: string): Observable<any> {\n    return new Observable(subscriber => {\n      if (orderId) {\n        const notification = this.notifications.find(n => (n.orderId.toString() === orderId.toString() && !n.read));\n        if (notification && !notification.read) {\n          // save in store\n          this.setNotificationStatus(notification._id, true);\n          this.notificationService.notificationRead({orderId, notificationType: notification.notificationType})\n            .subscribe(() => {\n                this.notificationStore.put(notification).subscribe();\n                subscriber.next();\n              },\n              error => {\n                // nothing to do\n                this.openToast('notifications.update_unsuccessful');\n                this.setNotificationStatus(notification._id, false);\n                this.log.error('Unable to save changed notification', error);\n                subscriber.error(error);\n                subscriber.complete();\n              },\n              () => {\n                subscriber.next();\n                subscriber.complete();\n              });\n        }\n      }\n    });\n  }\n\n  setNotificationStatus(id: string, read: boolean) {\n    const notification = this.notifications.find(n => n._id === id);\n    if (notification) {\n      notification.read = read;\n    }\n  }\n\n  openNotification(orderId: string) {\n    if (orderId) {\n      // create Order view for item\n      this.orderService.getOrderById(orderId.toString())\n        .subscribe((order: Order) => {\n          this.openOrder(order);\n        }, () => {\n          this.openToast('notifications.orderNotFound');\n        });\n    }\n  }\n\n  removeAllNotifications() {\n    this.notifications.forEach(notification => this.notificationStore.remove(notification).subscribe());\n    if (this.notifications.some(notification => !notification.read)) {\n      this.openToast('notifications.unreadNotification');\n    }\n  }\n\n  async markAllAsRead() {\n    this.notifications.forEach(async notification => {\n      if (!notification.read) {\n        await this.readNotification(String(notification.orderId)).subscribe();\n      }\n    });\n  }\n\n  cleanOldNotifications(): Observable<any> {\n    return new Observable(subscriber => {\n      this.notificationService.removeOldDocs().subscribe(() => {\n        },\n        (error) => {\n          this.log.error('Error while cleaning old notifications', error);\n          subscriber.error(error);\n          subscriber.complete();\n        },\n        () => {\n          subscriber.next();\n          subscriber.complete();\n        });\n    });\n  }\n\n  private readAllNotifications() {\n    this.notificationStore.allDocs()\n      .subscribe((notifications: Array<NotificationData>) => {\n        this.ngZone.run(() => {\n          this.notifications = notifications;\n        });\n      });\n  }\n\n  private manageNewNotification(notification: NotificationData) {\n    this.readAllNotifications();\n  }\n\n  private async openOrder(order: Order) {\n    const itemModal = await this.modalCtrl.create({\n      id: 'order-detail-tabs-page',\n      component: OrderDetailTabsPage,\n      componentProps: {\n        orderView: this.orderService.constructOrderView(order)\n      }\n    });\n    await itemModal.present();\n  }\n\n  private async openToast(message: string) {\n    const toast = await this.toastCtrl.create({\n      message: this.translateService.instant(message),\n      duration: 2 * 1000,\n      cssClass: 'processing-toast'\n    });\n\n    await toast.present();\n  }\n}\n"]}